<?xml version="1.0"?>
<launch>

  <arg name="robot_model" default="tsukutsuku" />
  <arg name="model" default="$(find-pkg-share yp_robot_config)/urdf/tsukutsuku.urdf.xacro" />
  <arg name="input_sensor_points_topic" default="/sensing/velodyne_lower/rectified/pointcloud_ex" />
  <arg name="output_downsample_sensor_points_topic" default="downsample/pointcloud" />
  <arg name="input_vehicle_twist_topic" default="/ypspur/twist" />
  <arg name="input_imu_topic" default="/sensing/microstrain_imu/gx5/nav/filtered_imu/data" />
  <arg name="use_sim_time" default="true" />

  <arg name="map_path" default="/home/tsukutsuku/data/maps/" />
  <arg name="pointcloud_map_path" default="$(var map_path)/pointcloud_map.pcd" />
  <arg name="pointcloud_map_file" default="pointcloud_map.pcd" />

  <include file="$(find-pkg-share autoware_global_parameter_loader)/launch/global_params.launch.py">
    <arg name="use_sim_time" value="$(var use_sim_time)" />
  </include>

  <group unless="$(var use_sim_time)">
    <include file="$(find-pkg-share yp_launch)/launch/tsukutsuku/collection_data.launch.xml">
      <arg name="robot_model" value="$(var robot_model)" />
    </include>
  </group>

  <node name="robot_state_publisher" pkg="robot_state_publisher" exec="robot_state_publisher">
    <param name="robot_description" value="$(command 'xacro $(var model)')" />
  </node>

  <node pkg="map_loader" exec="pointcloud_map_loader" name="pointcloud_map_loader" output="screen">
    <remap from="output/pointcloud_map" to="/map/pointcloud_map" />
    <param name="pcd_paths_or_directory" value="[$(var pointcloud_map_path)]" />
  </node>

  <include file="$(find-pkg-share map_tf_generator)/launch/map_tf_generator.launch.xml">
    <arg name="input_map_points_topic" value="/map/pointcloud_map" />
  </include>


  <include file="$(find-pkg-share localization_launch)/launch/localization.launch.xml">
    <arg name="input_sensor_points_topic" value="$(var input_sensor_points_topic)" />
    <arg name="input_vehicle_twist_topic" value="$(var input_vehicle_twist_topic)" />
    <arg name="input_imu_topic" value="$(var input_imu_topic)" />
    <arg name="output_downsample_sensor_points_topic" value="$(var output_downsample_sensor_points_topic)" />
  </include>

  <group if="$(var use_sim_time)">
    <node name="rviz2" pkg="rviz2" exec="rviz2" />
  </group>

</launch>